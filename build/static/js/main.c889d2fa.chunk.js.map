{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createOffer","console","log","pc","offerToReceiveVideo","offerToReceiveAudio","then","sdp","JSON","stringify","setLocalDescription","socket","emit","e","hangUp","candidate","localVideoRef","React","createRef","remoteVideoRef","openSocket","this","RTCPeerConnection","onicecandidate","onconnectionstatechange","onaddstream","current","srcObject","stream","constraints","video","audio","success","window","localStream","addStream","a","navigator","mediaDevices","getUserMedia","catch","error","on","desc","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","close","className","ref","autoPlay","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"oVAiHeA,E,YA5Gb,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KA0EVC,YAAc,WACVC,QAAQC,IAAI,SACZ,EAAKC,GAAGH,YAAY,CAACI,oBAAqB,EAAGC,oBAAqB,IAC7DC,MAAK,SAAAC,GACFN,QAAQC,IAAIM,KAAKC,UAAUF,IAC3B,EAAKJ,GAAGO,oBAAoBH,GAC5B,EAAKI,OAAOC,KAAK,QAASL,MAC3B,SAAAM,QAlFQ,EAqFnBC,OAAS,WACL,EAAKH,OAAOC,KAAK,WAnFjB,EAAKG,UAAY,KACjB,EAAKC,cAAgBC,IAAMC,YAC3B,EAAKC,eAAiBF,IAAMC,YAC5B,EAAKP,OAASS,IAAW,KANV,E,iFASE,IAAD,OAahBC,KAAKlB,GAAK,IAAImB,kBAZI,MAalBD,KAAKlB,GAAGoB,eAAiB,SAAAV,GAAUA,EAAEE,YAAc,EAAKA,YAAW,EAAKA,UAAYF,EAAEE,YACtFM,KAAKlB,GAAGqB,wBAA0B,SAAAX,GAAC,OAAIZ,QAAQC,IAAI,gCAAiCW,IACpFQ,KAAKlB,GAAGsB,YAAc,SAAAZ,GAAC,OAAI,EAAKM,eAAeO,QAAQC,UAAYd,EAAEe,QAErE,IAAMC,EAAc,CAACC,OAAO,EAAMC,OAAO,GACnCC,EAAU,SAAAJ,GACZK,OAAOC,YAAcN,EACrB,EAAKZ,cAAcU,QAAQC,UAAYC,EACvC,EAAKzB,GAAGgC,UAAUP,IAKtB,sBAAC,4BAAAQ,EAAA,sEACwBC,UAAUC,aAAaC,aAAaV,GAD5D,OACSD,EADT,OAEGI,EAAQJ,GAFX,0CAAD,GAGKY,OANW,SAAAC,GACZxC,QAAQC,IAAI,uBAAwBuC,MAOxCpB,KAAKV,OAAO+B,GAAG,WAAW,SAAAC,GACtB1C,QAAQC,IAAI,cACZ,EAAKC,GAAGyC,qBAAqB,IAAIC,sBAAsBF,IACvD,EAAKxC,GAAG2C,aAAa,CAAC1C,oBAAqB,EAAGC,oBAAqB,IAC9DC,MAAK,SAAAC,GACFN,QAAQC,IAAIM,KAAKC,UAAUF,IAC3B,EAAKJ,GAAGO,oBAAoBH,GAC5B,EAAKI,OAAOC,KAAK,SAAUL,GAC3BN,QAAQC,IAAI,kBACb,SAAAW,UAGXQ,KAAKV,OAAO+B,GAAG,YAAY,SAAAC,GACvB1C,QAAQC,IAAI,mBACZ,EAAKC,GAAGyC,qBAAqB,IAAIC,sBAAsBF,IACvD,EAAKhC,OAAOC,KAAK,YAAa,EAAKG,WACnCd,QAAQC,IAAI,qBAGhBmB,KAAKV,OAAO+B,GAAG,cAAc,SAAA3B,GACzBd,QAAQC,IAAI,qBAAsBa,GAClC,EAAKZ,GAAG4C,gBAAgB,IAAIC,gBAAgBjC,OAGhDM,KAAKV,OAAO+B,GAAG,UAAU,WACrB,EAAKvB,eAAeO,QAAQC,UAAY,KACxC,EAAKxB,GAAG8C,QACR,EAAK9C,GAAGoB,eAAiB,KACzB,EAAKpB,GAAGqB,wBAA0B,KAClC,EAAKrB,GAAGsB,YAAc,KACtBQ,OAAOC,YAAc,U,+BAmBzB,OACI,yBAAKgB,UAAU,UACX,2BACEC,IAAK9B,KAAKL,cACVoC,UAAQ,IAEV,2BACED,IAAK9B,KAAKF,eACViC,UAAQ,IAEV,6BACA,4BAAQC,QAAShC,KAAKrB,aAAtB,QACA,4BAAQqD,QAAShC,KAAKP,QAAtB,gB,GAvGIwC,aCQEC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBzB,WACrBA,UAAU0B,cAAcC,MAAM1D,MAAK,SAAA2D,GACjCA,EAAaC,kB","file":"static/js/main.c889d2fa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport openSocket from 'socket.io-client';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      this.candidate = null;\r\n      this.localVideoRef = React.createRef();\r\n      this.remoteVideoRef = React.createRef();\r\n      this.socket = openSocket('/');\r\n  }\r\n\r\n  componentDidMount() {\r\n      const pc_config = null;\r\n\r\n      // const pc_config = {\r\n      //     iceServers: [\r\n      //             {\r\n      //                 urls: 'stun:[STUN_IP]:[PORT]', e.g. ['stun:stun.l.google.com:19302']\r\n      //                 credential: '[YOUR CREDENTIAL]',\r\n      //                 username: '[USERNAME]'\r\n      //             }\r\n      //         ]\r\n      // };\r\n\r\n      this.pc = new RTCPeerConnection(pc_config);\r\n      this.pc.onicecandidate = e => {if (e.candidate && !this.candidate) this.candidate = e.candidate;};\r\n      this.pc.onconnectionstatechange = e => console.log('onconnectionstatechange fired', e);\r\n      this.pc.onaddstream = e => this.remoteVideoRef.current.srcObject = e.stream;\r\n\r\n      const constraints = {video: true, audio: true};\r\n      const success = stream => {\r\n          window.localStream = stream;\r\n          this.localVideoRef.current.srcObject = stream;\r\n          this.pc.addStream(stream);\r\n      };\r\n      const failure = error => {\r\n          console.log('getUserMedia error: ', error);\r\n      };\r\n      (async () => {\r\n          const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n          success(stream);\r\n      })().catch(failure);\r\n\r\n      this.socket.on('offered', desc => {\r\n          console.log('offer came');\r\n          this.pc.setRemoteDescription(new RTCSessionDescription(desc));\r\n          this.pc.createAnswer({offerToReceiveVideo: 1, offerToReceiveAudio: 1})\r\n              .then(sdp => {\r\n                  console.log(JSON.stringify(sdp));\r\n                  this.pc.setLocalDescription(sdp);\r\n                  this.socket.emit('answer', sdp);\r\n                  console.log('answer send');\r\n              }, e => {});\r\n      });\r\n\r\n      this.socket.on('answered', desc => {\r\n          console.log('answer received');\r\n          this.pc.setRemoteDescription(new RTCSessionDescription(desc));\r\n          this.socket.emit('candidate', this.candidate);\r\n          console.log('candidate sent');\r\n      });\r\n\r\n      this.socket.on('candidated', candidate => {\r\n          console.log('candidate received', candidate);\r\n          this.pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n      });\r\n\r\n      this.socket.on('hangup', () => {\r\n          this.remoteVideoRef.current.srcObject = null;\r\n          this.pc.close();\r\n          this.pc.onicecandidate = null;\r\n          this.pc.onconnectionstatechange = null;\r\n          this.pc.onaddstream = null;\r\n          window.localStream = null;\r\n      });\r\n  }\r\n\r\n  createOffer = () => {\r\n      console.log('offer');\r\n      this.pc.createOffer({offerToReceiveVideo: 1, offerToReceiveAudio: 1})\r\n          .then(sdp => {\r\n              console.log(JSON.stringify(sdp));\r\n              this.pc.setLocalDescription(sdp);\r\n              this.socket.emit('offer', sdp);\r\n          }, e => {});\r\n  };\r\n\r\n  hangUp = () => {\r\n      this.socket.emit('hangup');\r\n  };\r\n\r\n  render() {\r\n      return (\r\n          <div className='webrtc'>\r\n              <video\r\n                ref={this.localVideoRef}\r\n                autoPlay\r\n                />\r\n              <video\r\n                ref={this.remoteVideoRef}\r\n                autoPlay\r\n                />\r\n              <br/>\r\n              <button onClick={this.createOffer}>Call</button>\r\n              <button onClick={this.hangUp}>Hang Up</button>\r\n          </div>\r\n      );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}